#!/bin/bash
ERROR_LOG_FILE=/tmp/gke_tunnel_errors.log
STDOUT_LOG_FILE=/tmp/gke_tunnel_output.log


connect_to_gke_mgmt() {
  PROJECT_ID="$1"
  gcloud compute ssh gke-mgmt \
    --project="$PROJECT_ID" \
    --zone=me-west1-a \
    --tunnel-through-iap \
    --no-user-output-enabled \
    -- -M -S /tmp/sslsock \
    -L 8888:localhost:8888 -N -q -f
}


generate_aliases() {
  cat <<EOF
#### GKE-TUNNEL ALIASES ####
alias k='HTTPS_PROXY=localhost:8888 kubectl'
alias kg='HTTPS_PROXY=localhost:8888 kubectl get'
alias kd='HTTPS_PROXY=localhost:8888 kubectl describe'
alias kl='HTTPS_PROXY=localhost:8888 kubectl logs -f'
alias kubectl='HTTPS_PROXY=localhost:8888 kubectl'
alias helm='HTTPS_PROXY=localhost:8888 helm'
alias kubens='HTTPS_PROXY=localhost:8888 kubens'
alias k9s='HTTPS_PROXY=localhost:8888 k9s'
#### END GKE-TUNNEL ALIASES ####
EOF
}


add_zsh_aliases() {
  PARENT_PROCESS=$(ps -p $$ -o comm=)
  echo $SHELL | grep -q "bash" && local RC_FILE="$HOME/.bashrc" || local RC_FILE="$HOME/.zshrc"
  echo $RC_FILE > $STDOUT_LOG_FILE
  local ALIASES_BLOCK_START="#### GKE-TUNNEL ALIASES ####"
  local ALIASES_BLOCK_END="#### END GKE-TUNNEL ALIASES ####"

  if ! grep -q "$ALIASES_BLOCK_START" "$RC_FILE" && ! grep -q "$ALIASES_BLOCK_END" "$RC_FILE"; then
    generate_aliases >> "$RC_FILE"
  fi
}


print_line() {
  local yellow="\033[0;33m"
  local reset="\033[0m"
  echo -e "${yellow}$1${reset}"
}


print_options() {
  clear
  for ((i=0; i<${#OPTIONS[@]}; i++)); do
    if [ $i -eq $SELECTED_INDEX ]; then
      print_line "${OPTIONS[i]}"
    else
      echo "${OPTIONS[i]}"
    fi
  done
}

spinner() {
  local STEPS=("${@:1:$# / 2}")
  local CMDS=("${@:$# / 2 + 1}")

  local FRAME=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  local FRAME_INTERVAL=0.1
  local step=0

  tput civis

  while [ "$step" -lt "${#CMDS[@]}" ]; do
    ${CMDS[$step]} 2> $ERROR_LOG_FILE &
    pid=$!

    while ps -p $pid &>/dev/null; do
      echo -ne "\\r[   ] ${STEPS[$step]}"

      for k in "${!FRAME[@]}"; do
        echo -ne "\\r[ ${FRAME[k]} ]"
        sleep $FRAME_INTERVAL
      done
    done

    wait $pid
    status=$?
    
    if [ $status -eq 0 ]; then
        echo -ne "\\r[ ✔ ] ${STEPS[$step]}\\n"
    else
        echo -ne "\\r[ X ] ${STEPS[$step]}\\n"
        output=$(cat $ERROR_LOG_FILE)
        echo -e "$output"
        rm -f $ERROR_LOG_FILE
        exit 1
    fi

    step=$((step + 1))
    rm -f $ERROR_LOG_FILE
  
  done

  tput cnorm
}


collect_gke_clusters() {
  local PROJECT_ID="$1"
  gcloud container clusters list --project "$PROJECT_ID" --verbosity error | awk 'NR>1 {print $1}' > $STDOUT_LOG_FILE
}


select_gke_cluster() {
  local PROJECT_ID="$1"
  local STEPS=(
    "Collecting GKE clsuters from project $PROJECT_ID"
  )
  local CMDS=(
    "collect_gke_clusters $PROJECT_ID"
  )
  spinner "${STEPS[@]}" "${CMDS[@]}"
  IFS=$'\n' read -d '' -r -a OPTIONS < "$STDOUT_LOG_FILE"

  if [ ${#OPTIONS[@]} -eq 0 ]; then
    echo -ne "\\r[ X ] No GKE clusters found in project $PROJECT_ID"
    exit 1
  elif [ ${#OPTIONS[@]} -eq 1 ]; then
    echo -ne "\\r[ ✔ ] Selected GKE cluster: ${OPTIONS[0]}\n\033[A"
    GKE_CLUSTER=${OPTIONS[0]}
    return 0
  else
    local SELECTED_INDEX=0

    print_options

    while true; do
      read -rsn1 key

      case "$key" in
        A)  # UP arrow key
          if [ $SELECTED_INDEX -gt 0 ]; then
            ((SELECTED_INDEX--))
          fi
          ;;
        B)  # DOWN arrow key
          if [ $SELECTED_INDEX -lt $((${#OPTIONS[@]} - 1)) ]; then
            ((SELECTED_INDEX++))
          fi
          ;;
        '') # Enter key
          clear
          GKE_CLUSTER=${OPTIONS[SELECTED_INDEX]}
          return 0
          ;;
      esac

      print_options
    done
  fi
}

echo "==============================================================="
echo "==================== GKE-Private-Tunneller ===================="
echo "==============================================================="


PROJECT_ID="$1"

[[ ! -x "$(command -v gcloud)" ]] && printf "gcloud not found, you need to install gcloud first" && exit 1
[[ -z "$PROJECT_ID" ]] && printf "PROJECT_ID is not set" && exit 1
nc -z 127.0.0.1 8888 2> /dev/null && echo "Tunnel to basion-host is already open!" && exit 0

if [[ $# -ne 2 ]]; then
  select_gke_cluster $PROJECT_ID
else 
  GKE_CLUSTER=$2
fi

STEPS=(
  "Connecting to bastion-host in project $PROJECT_ID"
  "Adding cluster $GKE_CLUSTER to kubeconfig file"
  "Setting kubectl, Helm, kubens & k9s aliases"
)
CMDS=(
  "connect_to_gke_mgmt $PROJECT_ID"
  "gcloud container clusters get-credentials $GKE_CLUSTER --region=me-west1 --project=$PROJECT_ID --no-user-output-enabled"
  "add_zsh_aliases"
)

spinner "${STEPS[@]}" "${CMDS[@]}"

RC_FILE=$(< "$STDOUT_LOG_FILE")
# Replace $HOME with ~/ without escaping ~
RC_FILE=$(echo "$RC_FILE" | sed "s|$HOME|~|g")
# echo "$RC_FILE"

echo "==============================================================="
echo Done!
echo "Please run 'source $RC_FILE' to refresh aliases."
