#!/bin/bash

# Global Variables
ERROR_LOG_FILE=/tmp/gke_tunnel_errors.log
STDOUT_LOG_FILE=/tmp/gke_tunnel_output.log
if [[ -n "$PRIVATE_GKE_TUNNELLER_CONFIG" ]]; then
  CONFIG_FILE="$PRIVATE_GKE_TUNNELLER_CONFIG"
else
  CONFIG_FILE="$HOME/.config/private-gke-tunneller/config.toml"
fi
PROJECT_ID=""
GKE_CLUSTER=""
RC_FILE="$HOME/.$(basename "$SHELL")rc"
KUBECTL_ALIASES_FILE=""
HELM_ALIASES_FILE=""

parse_toml() {
  if [[ ! -x "$(command -v tomlq)" ]]; then
    KUBECTL_ALIASES_FILE=$(awk -F' = ' -v section="[kubectl]" -v key="aliases_file" '
      $0 == section {found_section=1}
      found_section && $1 == key {
          gsub(/"/, "", $2); gsub(/^[ \t]+|[ \t]+$/, "", $2)  # Remove quotes and trim whitespace
          print $2
          exit
      }
    ' "$CONFIG_FILE")
    HELM_ALIASES_FILE=$(awk -F' = ' -v section="[helm]" -v key="aliases_file" '
      $0 == section {found_section=1}
      found_section && $1 == key {
          gsub(/"/, "", $2); gsub(/^[ \t]+|[ \t]+$/, "", $2)  # Remove quotes and trim whitespace
          print $2
          exit
      }
    ' "$CONFIG_FILE")
    KUBECTL_ALIASES_FILE=$(eval echo "$KUBECTL_ALIASES_FILE")
    HELM_ALIASES_FILE=$(eval echo "$HELM_ALIASES_FILE")
  else
    KUBECTL_ALIASES_FILE=$(tomlq '.kubectl.aliases_file' "$CONFIG_FILE")
    HELM_ALIASES_FILE=$(tomlq '.helm.aliases_file' "$CONFIG_FILE")
  fi
  echo "$KUBECTL_ALIASES_FILE" "$HELM_ALIASES_FILE"
}

print_usage() {
  echo "Usage: $(basename "$0") --project_id=<PROJECT_ID>"
  echo ""
  echo "Optional arguments: --cluster_name=<GKE_CLUSTER_NAME>"
  echo ""
  echo "Examples:"
  echo "$(basename "$0") --project_id=project-dev"
  echo "$(basename "$0") --project_id=project-dev --cluster_name=cluster-dev"
  echo ""
  exit 1
}

connect_to_gke_mgmt() {
  gcloud auth print-access-token >/dev/null 2>&1 || gcloud auth login
  PROJECT_ID="$1"
  local STATUS
  STATUS=$(gcloud compute instances describe gke-mgmt --zone=me-west1-a --project="$PROJECT_ID" --format="get(status)")
  if [[ "$STATUS" == "TERMINATED" ]]; then
    gcloud compute instances start gke-mgmt --zone=me-west1-a --project="$PROJECT_ID"
    local ELAPSED=0
    local TIMEOUT=10
    local INTERVAL=1
    while [[ $ELAPSED -lt $TIMEOUT ]]; do
      local TINYPROXY_STATUS
      TINYPROXY_STATUS=$(gcloud compute ssh gke-mgmt --zone=me-west1-a --project="$PROJECT_ID" --command "systemctl is-active tinyproxy" 2>/dev/null)
      if [[ "$TINYPROXY_STATUS" == "active" ]]; then
        break
      fi
      sleep "$INTERVAL"
      ((ELAPSED += INTERVAL))
    done
    if [[ "$TINYPROXY_STATUS" != "active" ]]; then
      echo "Please verify TinyProxy process is active and try again" >"$ERROR_LOG_FILE"
      return 1
    fi
  fi
  gcloud compute ssh gke-mgmt \
    --project="$PROJECT_ID" \
    --zone=me-west1-a \
    --tunnel-through-iap \
    --no-user-output-enabled \
    -- -M -S /tmp/sslsock \
    -L 8888:localhost:8888 -N -q -f
}

add_zsh_aliases() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    KUBECTL_ALIASES_FILE="$RC_FILE"
    HELM_ALIASES_FILE="$RC_FILE"
  else
    read -r KUBECTL_ALIASES_FILE HELM_ALIASES_FILE <<<"$(parse_toml)"
    if [[ -z "$KUBECTL_ALIASES_FILE" ]]; then
      KUBECTL_ALIASES_FILE="$RC_FILE"
    fi
    if [[ -z "$HELM_ALIASES_FILE" ]]; then
      HELM_ALIASES_FILE="$RC_FILE"
    fi
  fi
  echo "$KUBECTL_ALIASES_FILE" "$HELM_ALIASES_FILE" >>"$DEBUG_FILE"
  if ! grep -q "alias kubectl" "$KUBECTL_ALIASES_FILE"; then
    echo "alias kubectl was not found in ""$KUBECTL_ALIASES_FILE""" >"$ERROR_LOG_FILE"
    return 1
  fi
  if ! grep -q "alias helm" "$HELM_ALIASES_FILE"; then
    echo "alias helm was not found in $HELM_ALIASES_FILE" >"$ERROR_LOG_FILE"
    return 1
  fi
  echo "$RC_FILE" >"$STDOUT_LOG_FILE"
  if [[ $OSTYPE == 'darwin'* ]]; then
    sed -i '' "s/'kubectl/'HTTPS_PROXY=localhost:8888 kubectl/g" "$KUBECTL_ALIASES_FILE"
    sed -i '' "s/'k9s/'HTTPS_PROXY=localhost:8888 k9s/g" "$KUBECTL_ALIASES_FILE"
    sed -i '' "s/'kubens/'HTTPS_PROXY=localhost:8888 kubens/g" "$KUBECTL_ALIASES_FILE"
    sed -i '' "s/'kubectx/'HTTPS_PROXY=localhost:8888 kubectx/g" "$KUBECTL_ALIASES_FILE"
    sed -i '' "s/'helm/'HTTPS_PROXY=localhost:8888 helm/g" "$HELM_ALIASES_FILE"
  else
    sed -i "s/'kubectl/'HTTPS_PROXY=localhost:8888 kubectl/g" "$KUBECTL_ALIASES_FILE"
    sed -i "s/'k9s/'HTTPS_PROXY=localhost:8888 k9s/g" "$KUBECTL_ALIASES_FILE"
    sed -i "s/'kubens/'HTTPS_PROXY=localhost:8888 kubens/g" "$KUBECTL_ALIASES_FILE"
    sed -i "s/'kubectx/'HTTPS_PROXY=localhost:8888 kubectx/g" "$KUBECTL_ALIASES_FILE"
    sed -i "s/'helm/'HTTPS_PROXY=localhost:8888 helm/g" "$HELM_ALIASES_FILE"
  fi
}

# print_line() {
#   local yellow="\033[0;33m"
#   local reset="\033[0m"
#   echo -e "${yellow}$1${reset}"
# }

print_options() {
  clear
  for ((i = 0; i < ${#OPTIONS[@]}; i++)); do
    if [ $i -eq "$SELECTED_INDEX" ]; then
      print_line "${OPTIONS[i]}"
    else
      echo "${OPTIONS[i]}"
    fi
  done
}

spinner() {
  local FRAME=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  local FRAME_INTERVAL=0.1
  local step=0
  tput civis
  while [ "$step" -lt "${#CMDS[@]}" ]; do
    ${CMDS[$step]} 2>"$ERROR_LOG_FILE" &
    pid=$!
    while ps -p $pid &>/dev/null; do
      echo -ne "\\r[   ] ${STEPS[$step]}"
      for k in "${!FRAME[@]}"; do
        echo -ne "\\r[ ${FRAME[k]} ]"
        sleep "$FRAME_INTERVAL"
      done
    done
    wait $pid
    local status=$?
    if [ $status -eq 0 ]; then
      echo -ne "\\r[ ✔ ] ${STEPS[$step]}\\n"
    else
      echo -ne "\\r[ X ] ${STEPS[$step]}\\n"
      local OUTPUT
      OUTPUT=$(<"$ERROR_LOG_FILE")
      echo -e "$OUTPUT"
      rm -f "$ERROR_LOG_FILE"
      tput cnorm
      exit 1
    fi
    step=$((step + 1))
    rm -f "$ERROR_LOG_FILE"
  done
  tput cnorm
}

collect_gke_clusters() {
  gcloud auth print-access-token >/dev/null 2>&1 || gcloud auth login
  gcloud container clusters list --project "$PROJECT_ID" --verbosity error | awk 'NR>1 {print $1}' >"$STDOUT_LOG_FILE"
}

select_gke_cluster() {
  local STEPS=(
    "Collecting GKE cluters from project $PROJECT_ID"
  )
  local CMDS=(
    "collect_gke_clusters $PROJECT_ID"
  )
  spinner "${STEPS[@]}" "${CMDS[@]}"
  IFS=$'\n' read -d '' -r -a OPTIONS <"$STDOUT_LOG_FILE"
  if [ ${#OPTIONS[@]} -eq 0 ]; then
    echo -ne "\\r[ X ] No GKE clusters found in project $PROJECT_ID"
    exit 1
  elif [ ${#OPTIONS[@]} -eq 1 ]; then
    echo "[ ✔ ] Selected GKE cluster: ${OPTIONS[0]}"
    echo -ne "\\r[ ✔ ] Selected GKE cluster: ${OPTIONS[0]}"
    GKE_CLUSTER=${OPTIONS[0]}
    return 0
  else
    local SELECTED_INDEX=0
    print_options
    while true; do
      read -rsn1 key
      case "$key" in
      A) # UP arrow key
        if [ $SELECTED_INDEX -gt 0 ]; then
          ((SELECTED_INDEX--))
        fi
        ;;
      B) # DOWN arrow key
        if [ $SELECTED_INDEX -lt $((${#OPTIONS[@]} - 1)) ]; then
          ((SELECTED_INDEX++))
        fi
        ;;
      '') # Enter key
        clear
        GKE_CLUSTER=${OPTIONS[SELECTED_INDEX]}
        return 0
        ;;
      esac
      print_options
    done
  fi
}

echo "==============================================================="
echo "=                   GKE-Private-Tunneller                     ="
echo "==============================================================="

while [[ "$#" -gt 0 ]]; do
  case "$1" in
  -p=* | --project_id=*) # Handles --project_id=value or -p=value
    PROJECT_ID="${1#*=}"
    shift
    ;;
  -p | --project_id) # Handles --project_id value or -p value
    if [[ -n "$2" && ! "$2" =~ ^- ]]; then
      PROJECT_ID="$2"
      shift 2
    else
      echo "Error: Missing value for $1"
      print_usage
    fi
    ;;
  -c=* | --cluster_name=*) # Handles --cluster_name=value or -c=value
    GKE_CLUSTER="${1#*=}"
    shift
    ;;
  -c | --cluster_name) # Handles --cluster_name value or -c value
    if [[ -n "$2" && ! "$2" =~ ^- ]]; then
      GKE_CLUSTER="$2"
      shift 2
    else
      echo "Error: Missing value for $1"
      print_usage
    fi
    ;;
  *)
    echo "Error: Unknown argument $1"
    print_usage
    ;;
  esac
done

if [[ -z "$PROJECT_ID" ]]; then
  print_usage
fi

[[ ! -x "$(command -v gcloud)" ]] && printf "gcloud not found, you need to install gcloud first" && exit 1
nc -z 127.0.0.1 8888 2>/dev/null && echo "Tunnel to basion-host is already open!" && exit 0

if [[ -z "$GKE_CLUSTER" ]]; then
  select_gke_cluster "$PROJECT_ID"
else
  echo "[ ✔ ] Selected GKE cluster: $GKE_CLUSTER"
fi

STEPS=(
  "Connecting to bastion-host in project $PROJECT_ID"
  "Adding cluster $GKE_CLUSTER to kubeconfig file"
  "Setting kubectl, Helm, kubens & k9s aliases"
)
CMDS=(
  "connect_to_gke_mgmt $PROJECT_ID"
  "gcloud container clusters get-credentials $GKE_CLUSTER --region=me-west1 --project=$PROJECT_ID --no-user-output-enabled"
  "add_zsh_aliases"
)

spinner "${STEPS[@]}" "${CMDS[@]}"

echo "==============================================================="
echo Done!
echo "Please run 'source ${RC_FILE//$HOME/~}' to refresh aliases."
